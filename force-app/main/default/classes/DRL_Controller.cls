/*******************************************************************************************
* @Name         DRL_Controller 
* @Date         August 7,2022 
* @Description  This class contains all the methods to be utilised by Dynamic Related List
                Component
*******************************************************************************************/
/* MODIFICATION LOG
* Version          Developer          Date               Description
*-------------------------------------------------------------------------------------------
*  1.0              Vinky        August 7,2022       Initial Creation                                                      
*******************************************************************************************/
public without sharing class DRL_Controller {

  public static Map<String, List<Object>> queryDynamicVariables;

   /**************************************************************************************
    * @Description  This method will return the metadata, data, configuration for the 
                    lightning data table to be generated by the Lightning Components
    * @Param		Map<String, Object> - Map of Input Parameters
    * @Return       Map<String, Object> - Map of Output Parameters
    /* MODIFICATION LOG
    * Version          Developer          Date               Description
    *-------------------------------------------------------------------------------------------
    *  1.0              Vinky        August 7,2022       Initial Creation                                                      
    *******************************************************************************************/ 
 @AuraEnabled
 public static Map<String, Object> getMetadata(Map<String, Object> mapInputParams){
    try {

        //Variable Decleration
        Map<String, Object> mapOutput = new Map<String, Object>();
        Map<String, String> mapColumnData = new Map<String, String>();
        List<Map<String, Object>> lstRowData = new List<Map<String, Object>> ();
        List<sObject> lstAllData = new List<sObject>(); 

        //Check if Input parameters are not null
        if(mapInputParams != Null 
            && !mapInputParams.isEmpty() 
            && mapInputParams.containsKey('relatedListName')){
                String recordID = mapInputParams.containsKey('recordId')?(String)mapInputParams.get('recordId'):null;

                //Get Configuration from metadata for the requested list
                List<DynamicRelatedList__mdt> lstDRLRecs = [SELECT Button_Configuration__c,
                                                                    Show_Delete_Action__c,
                                                                    Show_Edit_Action__c,
                                                                   (SELECT Field_API_Name__c,
                                                                            Related_List_Title__c,
                                                                            Show_In_Related_List__c,
                                                                            Id_Field__c,
                                                                            List_Type_Attribute__c,
                                                                            DynamicRelatedList_Object__r.Object_API_Name__c, 
                                                                            DynamicRelatedList_Object__r.Filter_Condition__c, 
                                                                            List_Cell_Attribute__c, 
                                                                            List_Cell_Datatype__c, 
                                                                            Sequence_In_List__c,
                                                                            Active__c FROM DynamicRelatedList_Fields__r 
                                                                            WHERE Active__c = TRUE 
                                                                            ORDER BY Sequence_In_List__c ASC) 
                                                                    FROM DynamicRelatedList__mdt 
                                                                    WHERE DeveloperName = :(String)mapInputParams.get('relatedListName')];
                //If Metadata configuration is present for requested List                                                                    
                if(!lstDRLRecs.isEmpty()){
                    map<String, List<String>> mapObjectFieldMapping = new map<String, List<String>>();
                    map<String, List<DynamicRelatedList_Field__mdt>> mapObjectField = new map<String, List<DynamicRelatedList_Field__mdt>>();
                    map<String, String> mapObjectFilterMapping = new map<String, String>();
                    DynamicRelatedList__mdt objDRLRecord = lstDRLRecs[0];//Always 1 record will be returned;
                    List<DynamicRelatedList_Field__mdt> lstField = objDRLRecord.DynamicRelatedList_Fields__r;
                    //Iterate over list of Fields to generate SOQL Query
                    for(DynamicRelatedList_Field__mdt objField :lstField){
                        String sObjectName = objField.DynamicRelatedList_Object__r.Object_API_Name__c;
                        if(mapObjectFieldMapping.containsKey(sObjectName)){
                            if(!String.valueOf(objField.Field_API_Name__c).contains('VAL:')){//Skip field to add to SOQL if VAL: is present in API Name
                            List<String> lstFields = mapObjectFieldMapping.get(sObjectName);                            
                            lstFields.add(objField.Field_API_Name__c);
                            mapObjectFieldMapping.put(sObjectName ,lstFields);
                            }
                            List<DynamicRelatedList_Field__mdt> lstObjFields = mapObjectField.get(sObjectName);
                            lstObjFields.add(objField);
                            mapObjectField.put(sObjectName, lstObjFields);
                        } else{
                            if(!String.valueOf(objField.Field_API_Name__c).contains('VAL:')){//Skip field to add to SOQL if VAL: is present in API Name
                                mapObjectFieldMapping.put(sObjectName ,new List<String>{objField.Field_API_Name__c});
                                mapObjectFilterMapping.put(sObjectName, objField.DynamicRelatedList_Object__r.Filter_Condition__c);
                            }
                            mapObjectField.put(sObjectName ,new List<DynamicRelatedList_Field__mdt>{objField});
                            
                        }
                    }
                    //Generate SOQL Query
                    for(String sObjectName :mapObjectFieldMapping.keySet()){
                        List<String> lstFields = mapObjectFieldMapping.get(sObjectName);
                        String sFields = String.join(lstFields, ',');
                        String sQuery = 'SELECT '+sFields+' FROM '+sObjectName;
                        if(mapObjectFilterMapping.containsKey(sObjectName) && mapObjectFilterMapping.get(sObjectName) != null){
                            String sFieldCondition = getCompleteQuery(mapObjectFilterMapping.get(sObjectName));
                            sQuery+= ' WHERE '+sFieldCondition;
                        }
                        List<sObject> lstObject = Database.query(sQuery); //Data can be requested for multiple objects
                        lstAllData.addAll(lstObject);
                        

                    }
                    //If data is not empty, Prepare the data in lightning datatable format
                    if(!lstAllData.isEmpty()){                        
                        for(sObject objData :lstAllData){
                            Map<String, Object> mapRowData = new Map<String, Object>();
                            String sObjectType = String.valueOf(objData.getSObjectType());
                            if(mapObjectField.containsKey(sObjectType)){
                               List<DynamicRelatedList_Field__mdt>  lstFields = mapObjectField.get(sObjectType);
                                for(DynamicRelatedList_Field__mdt objField: lstFields){
                                        String sFieldApiName = objField.Field_API_Name__c;
                                        String sListTitle = objField.Related_List_Title__c;
                                        if(!sFieldApiName.startsWith('VAL:')){
                                    
                                    if(!sFieldApiName.contains('.')){
                                        if(objField.Id_Field__c == true){
                                            mapRowData.put('Id' ,  '/'+objData.get(sFieldApiName));
                                        } else{
                                            mapRowData.put(sListTitle ,  objData.get(sFieldApiName));
                                        }    
                                    } else {                                    
                                        Object sData= null;
                                        List<String> lstString = sFieldApiName.split('\\.');
                                        if(lstString.size() == 2){
                                            sData = objData.getSObject(lstString[0]).get(lstString[1]);
                                        } else if(lstString.size() == 3){
                                            sData = objData.getSObject(lstString[0]).getSObject(lstString[1]).get(lstString[2]); 
                                        } else if(lstString.size() == 4){
                                            sData = objData.getSObject(lstString[0]).getSObject(lstString[1]).getSObject(lstString[2]).get(lstString[3]); 
                                        } else if(lstString.size() == 5){
                                            sData = objData.getSObject(lstString[0]).getSObject(lstString[1]).getSObject(lstString[2]).getSObject(lstString[3]).get(lstString[4]); 
                                        }
                                        if(objField.Id_Field__c == true){
                                            mapRowData.put('Id' ,  '/'+sData);
                                        } else{
                                            mapRowData.put(sListTitle ,  sData);
                                        }
                                        
                                    }   
                                } else {
                                    mapRowData.put(sListTitle ,  sFieldApiName.replace('VAL:', ''));
                                }                               
                                       
                                }
                                lstRowData.add(mapRowData);
                            }
                           
                        }
                        //Prepare Output Map
                        mapOutput = new Map<String, Object>();
                        mapOutput.put('isSuccess', true);
                        mapOutput.put('columnData', generateColumnData(new Map<String, Object>{ 'fields' => lstField,'editButton'=>objDRLRecord.Show_Edit_Action__c,'deleteButton'=>objDRLRecord.Show_Delete_Action__c}));
                        mapOutput.put('data', JSON.serialize(lstRowData));                       
                    }
                    //Add Button Configurations to OutputMap
                    if(objDRLRecord.Button_Configuration__c != NULL){
                        mapOutput.put('isSuccess', true);
                        mapOutput.put('buttonData', objDRLRecord.Button_Configuration__c);
                    }                    
                   
                }
               
            }
            return  mapOutput; 
        
    }catch (Exception e) {
        //If Exception, return error
        Map<String, Object> mapOutput = new Map<String, Object>();
        mapOutput.put('isSuccess', false);
        mapOutput.put('error', e);
        return  mapOutput;
    }
 }
    /**************************************************************************************
    * @Description  This method will return JSON formatted String for Column configuration 
                    for lightning data table
    * @Param		Map<String, Object> - Map of Input Parameters
    * @Return       String - JSON formatted String
    /* MODIFICATION LOG
    * Version          Developer          Date               Description
    *-------------------------------------------------------------------------------------------
    *  1.0              Vinky        August 7,2022       Initial Creation                                                      
    *******************************************************************************************/
    public static String generateColumnData(Map<String, Object> mapInputParams){        
        //Variable Deceleration
        Set<Map<String, Object>> lstColumnData = new Set<Map<String, Object>>();
        Map<Integer, Object> mapSeqencedColumn = new Map<Integer, Object>();
        //Read Input Parametes
        List<DynamicRelatedList_Field__mdt> lstField = mapInputParams.containsKey('fields')?(List<DynamicRelatedList_Field__mdt>)mapInputParams.get('fields'):null;  
        Boolean bIsEditButtonEnabled =  mapInputParams.containsKey('editButton')?(Boolean)mapInputParams.get('editButton'):false; 
        Boolean bIsDeleteButtonEnabled =  mapInputParams.containsKey('deleteButton')?(Boolean)mapInputParams.get('deleteButton'):false; 

        //For Each Field Configuration
        for(DynamicRelatedList_Field__mdt objField : lstField){
           
                if(objField.Show_In_Related_List__c == true){
                    Map<String, Object> mapColumnData = new Map<String, Object>();
                mapColumnData.put('label',  objField.Related_List_Title__c);
                if(objField.Id_Field__c == true){
                    mapColumnData.put('fieldName',  'Id');
                } else{
                    mapColumnData.put('fieldName',  objField.Related_List_Title__c);
                }
                
                mapColumnData.put('type',  objField.List_Cell_Datatype__c);
                if(objField.List_Cell_Attribute__c != null ){
                    mapColumnData.put('cellAttributes', JSON.deserializeUntyped(objField.List_Cell_Attribute__c));
                }
                if(objField.List_Type_Attribute__c != null ){
                    mapColumnData.put('typeAttributes',  JSON.deserializeUntyped(objField.List_Type_Attribute__c));
                }
                mapSeqencedColumn.put(Integer.valueOf(objField.Sequence_In_List__c), mapColumnData);
            }
            //Arrange columns as per requested sequence
            if(!mapSeqencedColumn.isEmpty()){
                Set<Integer> setSortedKeys = mapSeqencedColumn.keySet();
                List<Integer> lstSortedKeys = new List<Integer>();
                lstSortedKeys.addAll(setSortedKeys);
                lstSortedKeys.sort();
                for(Integer iSeqNum : lstSortedKeys){
                    lstColumnData.add((Map<String, Object>)mapSeqencedColumn.get(iSeqNum));
                }
            }
        }
        //If Edit/Delete buttons are enabled
        if(bIsEditButtonEnabled || bIsDeleteButtonEnabled){
            List<Map<String, String>> lstActions = new List<Map<String, String>>();
            if(bIsEditButtonEnabled){
                lstActions.add(new Map<String, String>{'label'=> 'Edit', 'name'=> 'Edit_Button' });
            }
            if(bIsDeleteButtonEnabled){
                lstActions.add(new Map<String, String>{'label'=> 'Delete', 'name'=> 'Delete_Button' });
            }
            lstColumnData.add(new Map<String, Object>{ 'type'=> 'action', 'typeAttributes' => new Map<String, Object>{'rowActions'=> lstActions}});
        }
        //return JSON Formatted String
        return JSON.serialize(lstColumnData);
    }

    /**************************************************************************************
    * @Description  This method will replace the dynamic String to be replaced with in SOQL Query
    * @Param		String - String to be replaced
    * @Return       String - SOQL Query
    /* MODIFICATION LOG
    * Version          Developer          Date               Description
    *-------------------------------------------------------------------------------------------
    *  1.0              Vinky        August 7,2022       Initial Creation                                                      
    *******************************************************************************************/
    public static String getCompleteQuery(String sCondition){
        if(sCondition.indexOf('{') != -1 && sCondition.indexOf('}') != -1){
            String sFunctionName = sCondition.substring(sCondition.indexOf('{')+1, sCondition.indexOf('}'));
            String sApexClass = 'DRL_ApexVariables';
            System.debug('Function Name '+sFunctionName);
            //Call Callable Method
            Callable extension = (Callable) Type.forName(sApexClass).newInstance();
            String sFilterCondition;
            if(!Test.isRunningTest()){
                sFilterCondition = (String)extension.call(sFunctionName, new Map<String, Object>());
                return (String)sCondition.replace('{'+sFunctionName+'}', sFilterCondition);
            } else {
                return (String)sCondition.replace('{'+sFunctionName+'}', '');
            }
            

        } else{
            return sCondition;
        }

    }


    @AuraEnabled
    public static String deleteRecord(Id iRecordId){
        String sObjName = iRecordId.getSObjectType().getDescribe().getName();
        String sQuery= 'Select Id From '+sObjName+' WHERE ID =\''+iRecordId+'\'';
        List<sObject> lstSObjectRecord = Database.query(sQuery);
        if(!lstSObjectRecord.isEmpty()){
            try{
                delete lstSObjectRecord;
                return 'success';
            } catch(Exception ex) {
                return 'error';
            }            
        }
        return '';

    }
}